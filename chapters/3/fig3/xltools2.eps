%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 223 149
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, June 18, 2018 6:29:29 PM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
223 149 setpagesize
0 0 0 0 setmargins
0 0 setorigin
223 149 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
223.000 0.00000 l
223.000 149.000 l
0.00000 149.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
223.000 0.00000 l
223.000 149.000 l
0.00000 149.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 223 149 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -73.0000 -141.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
73.0000 141.000 m
296.000 141.000 l
296.000 290.000 l
73.0000 290.000 l
73.0000 141.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -73.0000 -141.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -73.0000 -141.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -73.0000 -141.000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .600000 0.00000 RG
newpath
196.000 182.000 m
196.000 214.000 l
196.000 216.209 197.791 218.000 200.000 218.000  c
277.000 218.000 l
279.209 218.000 281.000 216.209 281.000 214.000  c
281.000 182.000 l
281.000 179.791 279.209 178.000 277.000 178.000  c
200.000 178.000 l
197.791 178.000 196.000 179.791 196.000 182.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
200.701 163.561 m
200.701 160.045 l
202.810 160.045 l
202.810 169.170 l
200.701 169.170 l
200.701 168.217 l
200.419 168.602 200.104 168.886 199.755 169.068  c
199.406 169.251 199.003 169.342 198.544 169.342  c
197.732 169.342 197.068 169.019 196.552 168.373  c
196.037 167.727 195.779 166.899 195.779 165.889  c
195.779 164.878 196.037 164.053 196.552 163.412  c
197.068 162.771 197.732 162.451 198.544 162.451  c
198.992 162.451 199.393 162.542 199.747 162.725  c
200.102 162.907 200.419 163.186 200.701 163.561  c
h
199.326 167.811 m
199.774 167.811 200.115 167.646 200.349 167.318  c
200.583 166.990 200.701 166.514 200.701 165.889  c
200.701 165.264 200.583 164.787 200.349 164.459  c
200.115 164.131 199.774 163.967 199.326 163.967  c
198.878 163.967 198.537 164.131 198.302 164.459  c
198.068 164.787 197.951 165.264 197.951 165.889  c
197.951 166.514 198.068 166.990 198.302 167.318  c
198.537 167.646 198.878 167.811 199.326 167.811  c
h
207.947 163.951 m
207.488 163.951 207.137 164.118 206.892 164.451  c
206.647 164.785 206.525 165.264 206.525 165.889  c
206.525 166.524 206.647 167.008 206.892 167.342  c
207.137 167.675 207.488 167.842 207.947 167.842  c
208.405 167.842 208.757 167.675 209.001 167.342  c
209.246 167.008 209.369 166.524 209.369 165.889  c
209.369 165.264 209.246 164.785 209.001 164.451  c
208.757 164.118 208.405 163.951 207.947 163.951  c
h
207.947 162.451 m
209.082 162.451 209.968 162.756 210.603 163.365  c
211.238 163.975 211.556 164.816 211.556 165.889  c
211.556 166.972 211.238 167.818 210.603 168.428  c
209.968 169.037 209.082 169.342 207.947 169.342  c
206.822 169.342 205.939 169.037 205.298 168.428  c
204.658 167.818 204.337 166.972 204.337 165.889  c
204.337 164.816 204.658 163.975 205.298 163.365  c
205.939 162.756 206.822 162.451 207.947 162.451  c
h
219.160 163.701 m
219.420 163.295 219.733 162.985 220.097 162.771  c
220.462 162.558 220.863 162.451 221.300 162.451  c
222.061 162.451 222.639 162.683 223.035 163.146  c
223.430 163.610 223.628 164.285 223.628 165.170  c
223.628 169.170 l
221.519 169.170 l
221.519 165.748 l
221.519 165.696 221.519 165.644 221.519 165.592  c
221.519 165.540 221.519 165.462 221.519 165.357  c
221.519 164.889 221.451 164.550 221.316 164.342  c
221.180 164.133 220.962 164.029 220.660 164.029  c
220.264 164.029 219.956 164.193 219.738 164.521  c
219.519 164.850 219.404 165.326 219.394 165.951  c
219.394 169.170 l
217.285 169.170 l
217.285 165.748 l
217.285 165.019 217.222 164.550 217.097 164.342  c
216.972 164.133 216.748 164.029 216.425 164.029  c
216.029 164.029 215.722 164.193 215.503 164.521  c
215.285 164.850 215.175 165.321 215.175 165.936  c
215.175 169.170 l
213.066 169.170 l
213.066 162.607 l
215.175 162.607 l
215.175 163.561 l
215.436 163.196 215.733 162.920 216.066 162.732  c
216.399 162.545 216.764 162.451 217.160 162.451  c
217.618 162.451 218.022 162.561 218.371 162.779  c
218.719 162.998 218.983 163.305 219.160 163.701  c
h
225.679 160.420 m
227.929 160.420 l
227.929 165.670 l
227.929 166.389 228.046 166.904 228.281 167.217  c
228.515 167.529 228.903 167.686 229.445 167.686  c
229.976 167.686 230.361 167.529 230.601 167.217  c
230.841 166.904 230.960 166.389 230.960 165.670  c
230.960 160.420 l
233.210 160.420 l
233.210 165.670 l
233.210 166.910 232.900 167.831 232.281 168.436  c
231.661 169.040 230.716 169.342 229.445 169.342  c
228.174 169.342 227.229 169.040 226.609 168.436  c
225.989 167.831 225.679 166.910 225.679 165.670  c
225.679 160.420 l
h
235.720 167.607 m
237.720 167.607 l
237.720 161.951 l
235.673 162.373 l
235.673 160.842 l
237.705 160.420 l
239.845 160.420 l
239.845 167.607 l
241.845 167.607 l
241.845 169.170 l
235.720 169.170 l
235.720 167.607 l
h
f
2 J
10.0000 M
1.00000 .600000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
196.000 182.000 m
196.000 214.000 l
196.000 216.209 197.791 218.000 200.000 218.000  c
277.000 218.000 l
279.209 218.000 281.000 216.209 281.000 214.000  c
281.000 182.000 l
281.000 179.791 279.209 178.000 277.000 178.000  c
200.000 178.000 l
197.791 178.000 196.000 179.791 196.000 182.000  c
h
S
2 J
10.0000 M
1.00000 .600000 0.00000 RG
newpath
91.0000 182.000 m
91.0000 214.000 l
91.0000 216.209 92.7909 218.000 95.0000 218.000  c
172.000 218.000 l
174.209 218.000 176.000 216.209 176.000 214.000  c
176.000 182.000 l
176.000 179.791 174.209 178.000 172.000 178.000  c
95.0000 178.000 l
92.7909 178.000 91.0000 179.791 91.0000 182.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
96.1367 163.561 m
96.1367 160.045 l
98.2461 160.045 l
98.2461 169.170 l
96.1367 169.170 l
96.1367 168.217 l
95.8555 168.602 95.5404 168.886 95.1914 169.068  c
94.8424 169.251 94.4388 169.342 93.9805 169.342  c
93.1680 169.342 92.5039 169.019 91.9883 168.373  c
91.4726 167.727 91.2148 166.899 91.2148 165.889  c
91.2148 164.878 91.4726 164.053 91.9883 163.412  c
92.5039 162.771 93.1680 162.451 93.9805 162.451  c
94.4284 162.451 94.8294 162.542 95.1836 162.725  c
95.5378 162.907 95.8555 163.186 96.1367 163.561  c
h
94.7617 167.811 m
95.2096 167.811 95.5508 167.646 95.7851 167.318  c
96.0195 166.990 96.1367 166.514 96.1367 165.889  c
96.1367 165.264 96.0195 164.787 95.7851 164.459  c
95.5508 164.131 95.2096 163.967 94.7617 163.967  c
94.3138 163.967 93.9726 164.131 93.7383 164.459  c
93.5039 164.787 93.3867 165.264 93.3867 165.889  c
93.3867 166.514 93.5039 166.990 93.7383 167.318  c
93.9726 167.646 94.3138 167.811 94.7617 167.811  c
h
103.383 163.951 m
102.924 163.951 102.573 164.118 102.328 164.451  c
102.083 164.785 101.961 165.264 101.961 165.889  c
101.961 166.524 102.083 167.008 102.328 167.342  c
102.573 167.675 102.924 167.842 103.383 167.842  c
103.841 167.842 104.193 167.675 104.437 167.342  c
104.682 167.008 104.805 166.524 104.805 165.889  c
104.805 165.264 104.682 164.785 104.437 164.451  c
104.193 164.118 103.841 163.951 103.383 163.951  c
h
103.383 162.451 m
104.518 162.451 105.404 162.756 106.039 163.365  c
106.674 163.975 106.992 164.816 106.992 165.889  c
106.992 166.972 106.674 167.818 106.039 168.428  c
105.404 169.037 104.518 169.342 103.383 169.342  c
102.258 169.342 101.375 169.037 100.734 168.428  c
100.094 167.818 99.7734 166.972 99.7734 165.889  c
99.7734 164.816 100.094 163.975 100.734 163.365  c
101.375 162.756 102.258 162.451 103.383 162.451  c
h
114.596 163.701 m
114.856 163.295 115.169 162.985 115.533 162.771  c
115.898 162.558 116.299 162.451 116.736 162.451  c
117.497 162.451 118.075 162.683 118.471 163.146  c
118.867 163.610 119.064 164.285 119.064 165.170  c
119.064 169.170 l
116.955 169.170 l
116.955 165.748 l
116.955 165.696 116.955 165.644 116.955 165.592  c
116.955 165.540 116.955 165.462 116.955 165.357  c
116.955 164.889 116.887 164.550 116.752 164.342  c
116.617 164.133 116.398 164.029 116.096 164.029  c
115.700 164.029 115.393 164.193 115.174 164.521  c
114.955 164.850 114.840 165.326 114.830 165.951  c
114.830 169.170 l
112.721 169.170 l
112.721 165.748 l
112.721 165.019 112.658 164.550 112.533 164.342  c
112.408 164.133 112.184 164.029 111.861 164.029  c
111.465 164.029 111.158 164.193 110.939 164.521  c
110.721 164.850 110.611 165.321 110.611 165.936  c
110.611 169.170 l
108.502 169.170 l
108.502 162.607 l
110.611 162.607 l
110.611 163.561 l
110.872 163.196 111.169 162.920 111.502 162.732  c
111.835 162.545 112.200 162.451 112.596 162.451  c
113.054 162.451 113.458 162.561 113.807 162.779  c
114.156 162.998 114.419 163.305 114.596 163.701  c
h
125.521 164.779 m
125.521 163.686 125.420 162.917 125.217 162.475  c
125.014 162.032 124.667 161.811 124.178 161.811  c
123.699 161.811 123.355 162.032 123.146 162.475  c
122.938 162.917 122.834 163.686 122.834 164.779  c
122.834 165.894 122.938 166.678 123.146 167.131  c
123.355 167.584 123.699 167.811 124.178 167.811  c
124.667 167.811 125.014 167.584 125.217 167.131  c
125.420 166.678 125.521 165.894 125.521 164.779  c
h
127.787 164.811 m
127.787 166.258 127.475 167.376 126.850 168.162  c
126.225 168.949 125.334 169.342 124.178 169.342  c
123.032 169.342 122.146 168.949 121.521 168.162  c
120.896 167.376 120.584 166.258 120.584 164.811  c
120.584 163.352 120.896 162.230 121.521 161.443  c
122.146 160.657 123.032 160.264 124.178 160.264  c
125.334 160.264 126.225 160.657 126.850 161.443  c
127.475 162.230 127.787 163.352 127.787 164.811  c
h
f
2 J
10.0000 M
1.00000 .600000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
91.0000 182.000 m
91.0000 214.000 l
91.0000 216.209 92.7909 218.000 95.0000 218.000  c
172.000 218.000 l
174.209 218.000 176.000 216.209 176.000 214.000  c
176.000 182.000 l
176.000 179.791 174.209 178.000 172.000 178.000  c
95.0000 178.000 l
92.7909 178.000 91.0000 179.791 91.0000 182.000  c
h
S
2 J
10.0000 M
0.00000 0.00000 .501961 RG
newpath
91.0000 227.000 m
91.0000 271.000 l
91.0000 273.209 92.7909 275.000 95.0000 275.000  c
277.000 275.000 l
279.209 275.000 281.000 273.209 281.000 271.000  c
281.000 227.000 l
281.000 224.791 279.209 223.000 277.000 223.000  c
95.0000 223.000 l
92.7909 223.000 91.0000 224.791 91.0000 227.000  c
h
f
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
newpath
98.1719 257.420 m
99.3594 257.420 l
99.3594 261.014 l
103.656 261.014 l
103.656 257.420 l
104.844 257.420 l
104.844 266.170 l
103.656 266.170 l
103.656 261.998 l
99.3594 261.998 l
99.3594 266.170 l
98.1719 266.170 l
98.1719 257.420 l
h
109.883 266.779 m
109.581 267.561 109.284 268.071 108.992 268.311  c
108.701 268.550 108.315 268.670 107.836 268.670  c
106.977 268.670 l
106.977 267.764 l
107.602 267.764 l
107.904 267.764 108.135 267.693 108.297 267.553  c
108.458 267.412 108.638 267.081 108.836 266.561  c
109.039 266.061 l
106.383 259.607 l
107.523 259.607 l
109.570 264.732 l
111.633 259.607 l
112.773 259.607 l
109.883 266.779 l
h
115.297 265.186 m
115.297 268.670 l
114.219 268.670 l
114.219 259.607 l
115.297 259.607 l
115.297 260.607 l
115.526 260.212 115.812 259.920 116.156 259.732  c
116.500 259.545 116.911 259.451 117.391 259.451  c
118.193 259.451 118.844 259.766 119.344 260.396  c
119.844 261.027 120.094 261.857 120.094 262.889  c
120.094 263.920 119.844 264.753 119.344 265.389  c
118.844 266.024 118.193 266.342 117.391 266.342  c
116.911 266.342 116.500 266.245 116.156 266.053  c
115.812 265.860 115.526 265.571 115.297 265.186  c
h
118.969 262.889 m
118.969 262.097 118.805 261.477 118.477 261.029  c
118.148 260.581 117.703 260.357 117.141 260.357  c
116.568 260.357 116.117 260.581 115.789 261.029  c
115.461 261.477 115.297 262.097 115.297 262.889  c
115.297 263.680 115.461 264.303 115.789 264.756  c
116.117 265.209 116.568 265.436 117.141 265.436  c
117.703 265.436 118.148 265.209 118.477 264.756  c
118.805 264.303 118.969 263.680 118.969 262.889  c
h
127.492 262.623 m
127.492 263.139 l
122.523 263.139 l
122.576 263.889 122.802 264.456 123.203 264.842  c
123.604 265.227 124.159 265.420 124.867 265.420  c
125.284 265.420 125.688 265.370 126.078 265.271  c
126.469 265.173 126.857 265.019 127.242 264.811  c
127.242 265.842 l
126.846 265.998 126.445 266.120 126.039 266.209  c
125.633 266.298 125.221 266.342 124.805 266.342  c
123.763 266.342 122.935 266.037 122.320 265.428  c
121.706 264.818 121.398 263.993 121.398 262.951  c
121.398 261.878 121.690 261.027 122.273 260.396  c
122.857 259.766 123.638 259.451 124.617 259.451  c
125.503 259.451 126.203 259.735 126.719 260.303  c
127.234 260.870 127.492 261.644 127.492 262.623  c
h
126.414 262.295 m
126.404 261.712 126.237 261.243 125.914 260.889  c
125.591 260.535 125.164 260.357 124.633 260.357  c
124.029 260.357 123.547 260.529 123.188 260.873  c
122.828 261.217 122.622 261.696 122.570 262.311  c
126.414 262.295 l
h
133.062 260.607 m
132.938 260.545 132.805 260.495 132.664 260.459  c
132.523 260.423 132.365 260.404 132.188 260.404  c
131.583 260.404 131.117 260.602 130.789 260.998  c
130.461 261.394 130.297 261.967 130.297 262.717  c
130.297 266.170 l
129.219 266.170 l
129.219 259.607 l
130.297 259.607 l
130.297 260.623 l
130.526 260.227 130.823 259.933 131.188 259.740  c
131.552 259.548 131.995 259.451 132.516 259.451  c
132.589 259.451 132.669 259.456 132.758 259.467  c
132.846 259.477 132.943 259.493 133.047 259.514  c
133.062 260.607 l
h
133.418 259.607 m
134.559 259.607 l
136.605 265.107 l
138.668 259.607 l
139.809 259.607 l
137.340 266.170 l
135.871 266.170 l
133.418 259.607 l
h
141.285 259.607 m
142.363 259.607 l
142.363 266.170 l
141.285 266.170 l
141.285 259.607 l
h
141.285 257.045 m
142.363 257.045 l
142.363 258.420 l
141.285 258.420 l
141.285 257.045 l
h
148.807 259.795 m
148.807 260.826 l
148.505 260.670 148.189 260.553 147.861 260.475  c
147.533 260.396 147.192 260.357 146.838 260.357  c
146.307 260.357 145.906 260.438 145.635 260.600  c
145.364 260.761 145.229 261.008 145.229 261.342  c
145.229 261.592 145.325 261.787 145.518 261.928  c
145.710 262.068 146.098 262.201 146.682 262.326  c
147.041 262.420 l
147.812 262.576 148.359 262.805 148.682 263.107  c
149.005 263.410 149.166 263.826 149.166 264.357  c
149.166 264.972 148.924 265.456 148.439 265.811  c
147.955 266.165 147.291 266.342 146.447 266.342  c
146.093 266.342 145.726 266.308 145.346 266.240  c
144.965 266.173 144.567 266.071 144.150 265.936  c
144.150 264.811 l
144.546 265.019 144.937 265.175 145.322 265.279  c
145.708 265.383 146.093 265.436 146.479 265.436  c
146.979 265.436 147.367 265.350 147.643 265.178  c
147.919 265.006 148.057 264.758 148.057 264.436  c
148.057 264.144 147.958 263.920 147.760 263.764  c
147.562 263.607 147.130 263.456 146.463 263.311  c
146.088 263.232 l
145.421 263.087 144.939 262.868 144.643 262.576  c
144.346 262.285 144.197 261.889 144.197 261.389  c
144.197 260.764 144.416 260.285 144.854 259.951  c
145.291 259.618 145.911 259.451 146.713 259.451  c
147.109 259.451 147.484 259.480 147.838 259.537  c
148.192 259.594 148.515 259.680 148.807 259.795  c
h
153.418 260.357 m
152.845 260.357 152.389 260.584 152.051 261.037  c
151.712 261.490 151.543 262.107 151.543 262.889  c
151.543 263.680 151.710 264.300 152.043 264.748  c
152.376 265.196 152.835 265.420 153.418 265.420  c
153.991 265.420 154.447 265.193 154.785 264.740  c
155.124 264.287 155.293 263.670 155.293 262.889  c
155.293 262.118 155.124 261.503 154.785 261.045  c
154.447 260.587 153.991 260.357 153.418 260.357  c
h
153.418 259.451 m
154.355 259.451 155.092 259.756 155.629 260.365  c
156.165 260.975 156.434 261.816 156.434 262.889  c
156.434 263.962 156.165 264.805 155.629 265.420  c
155.092 266.035 154.355 266.342 153.418 266.342  c
152.480 266.342 151.743 266.035 151.207 265.420  c
150.671 264.805 150.402 263.962 150.402 262.889  c
150.402 261.816 150.671 260.975 151.207 260.365  c
151.743 259.756 152.480 259.451 153.418 259.451  c
h
162.025 260.607 m
161.900 260.545 161.768 260.495 161.627 260.459  c
161.486 260.423 161.327 260.404 161.150 260.404  c
160.546 260.404 160.080 260.602 159.752 260.998  c
159.424 261.394 159.260 261.967 159.260 262.717  c
159.260 266.170 l
158.182 266.170 l
158.182 259.607 l
159.260 259.607 l
159.260 260.623 l
159.489 260.227 159.786 259.933 160.150 259.740  c
160.515 259.548 160.958 259.451 161.479 259.451  c
161.551 259.451 161.632 259.456 161.721 259.467  c
161.809 259.477 161.906 259.493 162.010 259.514  c
162.025 260.607 l
h
f
2 J
10.0000 M
0.00000 0.00000 .501961 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
91.0000 227.000 m
91.0000 271.000 l
91.0000 273.209 92.7909 275.000 95.0000 275.000  c
277.000 275.000 l
279.209 275.000 281.000 273.209 281.000 271.000  c
281.000 227.000 l
281.000 224.791 279.209 223.000 277.000 223.000  c
95.0000 223.000 l
92.7909 223.000 91.0000 224.791 91.0000 227.000  c
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
102.000 193.000 m
165.000 193.000 l
165.000 208.000 l
102.000 208.000 l
102.000 193.000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
110.402 195.904 m
111.684 195.904 l
113.855 199.154 l
116.043 195.904 l
117.309 195.904 l
114.496 200.107 l
117.496 204.654 l
116.230 204.654 l
113.762 200.936 l
111.293 204.654 l
110.012 204.654 l
113.137 199.982 l
110.402 195.904 l
h
119.045 195.904 m
120.232 195.904 l
120.232 203.654 l
124.498 203.654 l
124.498 204.654 l
119.045 204.654 l
119.045 195.904 l
h
130.576 196.232 m
130.576 198.092 l
132.795 198.092 l
132.795 198.936 l
130.576 198.936 l
130.576 202.498 l
130.576 203.029 130.649 203.370 130.795 203.521  c
130.941 203.673 131.238 203.748 131.686 203.748  c
132.795 203.748 l
132.795 204.654 l
131.686 204.654 l
130.852 204.654 130.277 204.498 129.959 204.186  c
129.641 203.873 129.482 203.311 129.482 202.498  c
129.482 198.936 l
128.701 198.936 l
128.701 198.092 l
129.482 198.092 l
129.482 196.232 l
130.576 196.232 l
h
136.750 198.842 m
136.177 198.842 135.721 199.068 135.383 199.521  c
135.044 199.975 134.875 200.592 134.875 201.373  c
134.875 202.165 135.042 202.785 135.375 203.232  c
135.708 203.680 136.167 203.904 136.750 203.904  c
137.323 203.904 137.779 203.678 138.117 203.225  c
138.456 202.771 138.625 202.154 138.625 201.373  c
138.625 200.602 138.456 199.988 138.117 199.529  c
137.779 199.071 137.323 198.842 136.750 198.842  c
h
136.750 197.936 m
137.688 197.936 138.424 198.240 138.961 198.850  c
139.497 199.459 139.766 200.300 139.766 201.373  c
139.766 202.446 139.497 203.290 138.961 203.904  c
138.424 204.519 137.688 204.826 136.750 204.826  c
135.812 204.826 135.076 204.519 134.539 203.904  c
134.003 203.290 133.734 202.446 133.734 201.373  c
133.734 200.300 134.003 199.459 134.539 198.850  c
135.076 198.240 135.812 197.936 136.750 197.936  c
h
144.092 198.842 m
143.519 198.842 143.063 199.068 142.725 199.521  c
142.386 199.975 142.217 200.592 142.217 201.373  c
142.217 202.165 142.383 202.785 142.717 203.232  c
143.050 203.680 143.508 203.904 144.092 203.904  c
144.665 203.904 145.120 203.678 145.459 203.225  c
145.798 202.771 145.967 202.154 145.967 201.373  c
145.967 200.602 145.798 199.988 145.459 199.529  c
145.120 199.071 144.665 198.842 144.092 198.842  c
h
144.092 197.936 m
145.029 197.936 145.766 198.240 146.303 198.850  c
146.839 199.459 147.107 200.300 147.107 201.373  c
147.107 202.446 146.839 203.290 146.303 203.904  c
145.766 204.519 145.029 204.826 144.092 204.826  c
143.154 204.826 142.417 204.519 141.881 203.904  c
141.344 203.290 141.076 202.446 141.076 201.373  c
141.076 200.300 141.344 199.459 141.881 198.850  c
142.417 198.240 143.154 197.936 144.092 197.936  c
h
148.887 195.529 m
149.965 195.529 l
149.965 204.654 l
148.887 204.654 l
148.887 195.529 l
h
156.408 198.279 m
156.408 199.311 l
156.106 199.154 155.791 199.037 155.463 198.959  c
155.135 198.881 154.794 198.842 154.439 198.842  c
153.908 198.842 153.507 198.923 153.236 199.084  c
152.965 199.245 152.830 199.493 152.830 199.826  c
152.830 200.076 152.926 200.271 153.119 200.412  c
153.312 200.553 153.700 200.686 154.283 200.811  c
154.643 200.904 l
155.413 201.061 155.960 201.290 156.283 201.592  c
156.606 201.894 156.768 202.311 156.768 202.842  c
156.768 203.456 156.525 203.941 156.041 204.295  c
155.557 204.649 154.893 204.826 154.049 204.826  c
153.695 204.826 153.327 204.792 152.947 204.725  c
152.567 204.657 152.169 204.555 151.752 204.420  c
151.752 203.295 l
152.148 203.503 152.538 203.660 152.924 203.764  c
153.309 203.868 153.695 203.920 154.080 203.920  c
154.580 203.920 154.968 203.834 155.244 203.662  c
155.520 203.490 155.658 203.243 155.658 202.920  c
155.658 202.628 155.559 202.404 155.361 202.248  c
155.163 202.092 154.731 201.941 154.064 201.795  c
153.689 201.717 l
153.023 201.571 152.541 201.352 152.244 201.061  c
151.947 200.769 151.799 200.373 151.799 199.873  c
151.799 199.248 152.018 198.769 152.455 198.436  c
152.893 198.102 153.512 197.936 154.314 197.936  c
154.710 197.936 155.085 197.964 155.439 198.021  c
155.794 198.079 156.117 198.165 156.408 198.279  c
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
102.000 193.000 m
165.000 193.000 l
165.000 208.000 l
102.000 208.000 l
102.000 193.000 l
h
S
2 J
10.0000 M
1.00000 0.00000 1.00000 RG
newpath
216.500 231.000 m
216.500 245.000 l
216.500 247.209 218.291 249.000 220.500 249.000  c
256.500 249.000 l
258.709 249.000 260.500 247.209 260.500 245.000  c
260.500 231.000 l
260.500 228.791 258.709 227.000 256.500 227.000  c
220.500 227.000 l
218.291 227.000 216.500 228.791 216.500 231.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
224.658 244.139 m
221.314 235.389 l
222.549 235.389 l
225.330 242.748 l
228.096 235.389 l
229.330 235.389 l
226.002 244.139 l
224.658 244.139 l
h
230.602 235.389 m
232.367 235.389 l
234.602 241.342 l
236.852 235.389 l
238.617 235.389 l
238.617 244.139 l
237.461 244.139 l
237.461 236.451 l
235.195 242.451 l
234.008 242.451 l
231.758 236.451 l
231.758 244.139 l
230.602 244.139 l
230.602 235.389 l
h
247.518 236.061 m
247.518 237.311 l
247.111 236.936 246.684 236.657 246.236 236.475  c
245.788 236.292 245.309 236.201 244.799 236.201  c
243.799 236.201 243.033 236.508 242.502 237.123  c
241.971 237.738 241.705 238.623 241.705 239.779  c
241.705 240.925 241.971 241.805 242.502 242.420  c
243.033 243.035 243.799 243.342 244.799 243.342  c
245.309 243.342 245.788 243.248 246.236 243.061  c
246.684 242.873 247.111 242.597 247.518 242.232  c
247.518 243.467 l
247.101 243.748 246.661 243.959 246.197 244.100  c
245.734 244.240 245.247 244.311 244.736 244.311  c
243.403 244.311 242.356 243.904 241.596 243.092  c
240.835 242.279 240.455 241.175 240.455 239.779  c
240.455 238.373 240.835 237.264 241.596 236.451  c
242.356 235.639 243.403 235.232 244.736 235.232  c
245.257 235.232 245.749 235.303 246.213 235.443  c
246.676 235.584 247.111 235.790 247.518 236.061  c
h
254.584 235.670 m
254.584 236.826 l
254.136 236.618 253.712 236.459 253.311 236.350  c
252.910 236.240 252.527 236.186 252.162 236.186  c
251.516 236.186 251.019 236.311 250.670 236.561  c
250.321 236.811 250.146 237.170 250.146 237.639  c
250.146 238.024 250.261 238.316 250.490 238.514  c
250.719 238.712 251.162 238.868 251.818 238.982  c
252.521 239.139 l
253.407 239.305 254.061 239.600 254.482 240.021  c
254.904 240.443 255.115 241.008 255.115 241.717  c
255.115 242.571 254.831 243.217 254.264 243.654  c
253.696 244.092 252.860 244.311 251.756 244.311  c
251.350 244.311 250.912 244.264 250.443 244.170  c
249.975 244.076 249.490 243.936 248.990 243.748  c
248.990 242.529 l
249.469 242.800 249.941 243.003 250.404 243.139  c
250.868 243.274 251.318 243.342 251.756 243.342  c
252.433 243.342 252.956 243.209 253.326 242.943  c
253.696 242.678 253.881 242.300 253.881 241.811  c
253.881 241.383 253.748 241.048 253.482 240.803  c
253.217 240.558 252.782 240.378 252.178 240.264  c
251.459 240.123 l
250.574 239.946 249.936 239.670 249.545 239.295  c
249.154 238.920 248.959 238.399 248.959 237.732  c
248.959 236.951 249.230 236.339 249.771 235.896  c
250.313 235.454 251.063 235.232 252.021 235.232  c
252.438 235.232 252.857 235.269 253.279 235.342  c
253.701 235.415 254.136 235.524 254.584 235.670  c
h
f
2 J
10.0000 M
1.00000 0.00000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
216.500 231.000 m
216.500 245.000 l
216.500 247.209 218.291 249.000 220.500 249.000  c
256.500 249.000 l
258.709 249.000 260.500 247.209 260.500 245.000  c
260.500 231.000 l
260.500 228.791 258.709 227.000 256.500 227.000  c
220.500 227.000 l
218.291 227.000 216.500 228.791 216.500 231.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
238.500 217.961 m
238.500 227.002 l
S
2 J
10.0000 M
1.00000 1.00000 0.00000 RG
3.00000 w
0 J
1.45000 M
newpath
133.500 208.000 m
133.500 238.000 l
206.480 238.000 l
S
newpath
216.480 238.000 m
201.480 231.750 l
205.230 238.000 l
201.480 244.250 l
h
f
1.00000 w
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
